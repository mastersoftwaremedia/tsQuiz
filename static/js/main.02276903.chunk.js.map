{"version":3,"sources":["Api.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","images/bg3.gif","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02276903.chunk.js","sourcesContent":["import {shuffleArray} from './utils'\r\n\r\nexport type Question={\r\n\tcategory:string\r\n\tcorrect_answer:string\r\n\tdifficulty:string\r\n\tincorrect_answers:string[]\r\n\tquestion:string \r\n\ttype:string \r\n}\r\nexport type QuestionsState=Question & {answers:string[]}\r\n\r\nexport enum Difficulty{\r\n\tEASY=\"easy\",\r\n\tMEDIUM=\"medium\",\r\n\tHARD=\"hard\"\r\n}\r\n\r\nexport const fetchQuizQuestions=async(\r\n\tamount:number, \r\n\tdifficulty:Difficulty\r\n): Promise<QuestionsState[]>=>{\r\n\tconst endpoint=`https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n\tconst data=await (await fetch(endpoint)).json()\r\n\t//console.log(data)\r\n\treturn data.results.map((question:Question)=>({\r\n\t\t...question,\r\n\t\tanswers:shuffleArray([\r\n\t\t\t...question.incorrect_answers, \r\n\t\t\tquestion.correct_answer\r\n\t\t])\r\n\t})) \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nimport { shuffleArray } from './utils'\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\"\r\n}\r\n\r\nexport type QuestionsState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n  }))\r\n};\r\n*/\r\n\r\n\r\n/*import {shuffleArray} from './utils'\r\n\r\nexport type Question={\r\n\tcategory:string\r\n\tcorrect_answer:string\r\n\tdifficulty:string\r\n\tincorrect_answers:string[]\r\n\tquestion:string \r\n\ttype:string \r\n}\r\nexport type QuestionsState=Question & {answers:string[]}\r\n\r\nexport enum Difficulty{\r\n\tEASY=\"easy\",\r\n\tMEDIUM=\"medium\",\r\n\tHARD=\"hard\"\r\n}\r\n\r\nexport const fetchQuizQuestions=async(\r\n\tamount:number, \r\n\tdifficulty:Difficulty\r\n): Promise<QuestionsState[]>=>{\r\n\tconst endpoint=`https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n\tconst data=await (await fetch(endpoint)).json()\r\n\t//console.log(data)\r\n\treturn data.results.map((question:Question)=>({\r\n\t\t...question,\r\n\t\tanswers:shuffleArray([\r\n\t\t\t...question.incorrect_answers, \r\n\t\t\tquestion.correct_answer\r\n\t\t])\r\n\t})) \r\n}*/\r\n//fetching API","import styled from 'styled-components'\r\n\r\nexport const Wrapper=styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean\r\n  userClicked: boolean\r\n}\r\n\r\nexport const ButtonWrapper=styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'\r\n\t\t};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`\r\n\r\n\r\n/*\r\nimport styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n*/","import React from 'react'\r\n//Types\r\nimport {AnswerObject} from '../App'\r\n//Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\r\n\r\n\r\ntype Props={\r\n\tquestion:string,\r\n\tanswers:string[]\r\n\t//callback:any\r\n\tcallback:(e:React.MouseEvent<HTMLButtonElement>)=>void\r\n\tuserAnswer:AnswerObject | undefined\r\n\t//userAnswer:any\r\n\tquestionNum:number\r\n\ttotalQuestions:number\r\n}\r\n\r\nconst QuestionCard:React.FC<Props>=({\r\n\tquestion, answers, callback, userAnswer, questionNum, totalQuestions\r\n})=>(\r\n\t<Wrapper>\r\n\t\t<p className='number'>\r\n\t\t\tQuestion: {questionNum} / {totalQuestions}\r\n\t\t</p>\r\n\t\t<p dangerouslySetInnerHTML={{__html:question}} />\r\n\t\t<div>\r\n\t\t\t{answers.map(answer=>(\r\n\t\t\t\t<ButtonWrapper\r\n\t\t\t\t\tkey={answer}\r\n\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\r\n\t\t\t\t\tuserClicked={userAnswer?.answer === answer}\r\n\t\t\t\t>\r\n\t\t\t\t\t<button disabled={userAnswer? true : false} value={answer} onClick={callback}>\r\n\t\t\t\t\t\t<span dangerouslySetInnerHTML={{__html:answer}} />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</ButtonWrapper>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t</Wrapper>\r\n)\r\nexport default QuestionCard\r\n\r\n\r\n\r\n/*\r\nimport React from 'react';\r\n// Types\r\nimport { AnswerObject } from '../App';\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => (\r\n  <Wrapper>\r\n    <p className='number'>\r\n      Question: {questionNr} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n    <div>\r\n      {answers.map((answer) => (\r\n        <ButtonWrapper\r\n          key={answer}\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer}\r\n        >\r\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n*/\r\n\r\n/*import React from 'react'\r\n//Types\r\nimport {AnswerObject} from '../App'\r\n//Styles\r\n\r\n\r\n\r\ntype Props={\r\n\tquestion:string,\r\n\tanswers:string[]\r\n\t//callback:any\r\n\tcallback:(e:React.MouseEvent<HTMLButtonElement>)=>void\r\n\tuserAnswer:AnswerObject | undefined\r\n\t//userAnswer:any\r\n\tquestionNum:number\r\n\ttotalQuestions:number\r\n}\r\n\r\nconst QuestionCard:React.FC<Props>=({\r\n\tquestion, answers, callback, userAnswer, questionNum, totalQuestions\r\n})=>(\r\n\t<div>\r\n\t\t<p className='number'>\r\n\t\t\tQuestion: {questionNum} / {totalQuestions}\r\n\t\t</p>\r\n\t\t<p dangerouslySetInnerHTML={{__html:question}} />\r\n\t\t<div>\r\n\t\t\t{answers.map(answer=>(\r\n\t\t\t\t<div\r\n\t\t\t\t\tkey={answer}\r\n\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\r\n\t\t\t\t\tuserClicked={userAnswer?.answer === answer}\r\n\t\t\t\t>\r\n\t\t\t\t\t<button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n\t\t\t\t\t\t<span dangerouslySetInnerHTML={{__html:answer}} />\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t</div>\r\n)\r\nexport default QuestionCard*/\r\n/*\r\n//import {Wrapper, ButtonWrapper} from './QuestionCard.styles'\r\n<button disabled={!!userAnswer} {userAnswer? true : false} >\r\n*/","export const shuffleArray=(array:any[])=>\r\n\t[...array].sort(()=>Math.random()-0.5)\r\n","export default __webpack_public_path__ + \"static/media/bg3.80762cf7.gif\";","import styled, {createGlobalStyle} from 'styled-components'\r\n//@ts-ignore\r\nimport BGImage from './images/bg3.gif'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  * {\r\n    font-family: 'Catamaran', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-family: Helvetica, sans-serif;\r\n\t\tbackground-color:Tomato;\r\n    /*background-image: linear-gradient(180deg, #fff, #87f1ff);*/\r\n    font-weight: 700;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n\t\tmargin-top:50px;\r\n\t\t\r\n  }\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`","import React, {useState} from 'react'\nimport QuestionCard from './components/QuestionCard'\nimport {fetchQuizQuestions} from './Api'\nimport {Difficulty, QuestionsState} from './Api'\nimport {GlobalStyle, Wrapper} from './App.styles'\n\nexport type AnswerObject={\n\tquestion:string \n\tanswer:string \n\tcorrect:boolean\n\tcorrectAnswer:string\n}\n\nconst TOTAL_QUESTIONS=10\n\nconst App:React.FC=()=>{\n\tconst [loading, setLoading]=useState(false)\n\tconst [questions, setQuestions]=useState<QuestionsState[]>([])\n\tconst [number, setNumber]=useState(0)\n\tconst [userAnswers, setUserAnswers]=useState<AnswerObject[]>([])\n\tconst [score, setScore]=useState(0)\n\tconst [gameOver, setGameOver]=useState(true)\n\t\n\t//console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY))\n\t//console.log(questions)\n\t\n\tconst startTrivia=async()=>{\n\t\tsetLoading(true)\n\t\tsetGameOver(false)\n\t\tconst newQuestions=await fetchQuizQuestions(\n\t\t\tTOTAL_QUESTIONS,\n\t\t\tDifficulty.EASY\n\t\t)\n\t\tsetQuestions(newQuestions)\n\t\tsetScore(0)\n\t\tsetUserAnswers([])\n\t\tsetNumber(0)\n\t\tsetLoading(false)\n\t}\n\tconst checkAnswer=(e:any)=>{\n\t\tif(!gameOver){\n\t\t\t//user's answer\n\t\t\tconst answer=e.currentTarget.value\n\t\t\t//check answer against correct answer\n\t\t\tconst correct=questions[number].correct_answer === answer\n\t\t\t//add score if answer is correct\n\t\t\tif(correct) setScore(prev=>prev+1)\n\t\t\t//save answer in the array for user answers\n\t\t\tconst answerObject={\n\t\t\t\tquestion:questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer:questions[number].correct_answer\n\t\t\t}\n\t\t\tsetUserAnswers(prev=>[...prev, answerObject])\n\t\t}\n\t}\n\tconst nextQuestion=()=>{\n\t\t//move onto the next question if not the last question\n\t\tconst nextQ=number+1\n\t\tif(nextQ === TOTAL_QUESTIONS){\n\t\t\tsetGameOver(true)\n\t\t}else{\n\t\t\tsetNumber(nextQ)\n\t\t}\n\t}\n  \t\n  return (\n\t\t<>\n\t\t<GlobalStyle />\n\t\t<Wrapper>\n\t\t\t<h1>Trivia Quiz</h1>\n\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t<button className='start' onClick={startTrivia}>\n\t\t\t\t\tStart\n\t\t\t\t</button>\t\t\t\n\t\t\t) : null}\n\t\t\t{!gameOver? <p className='score'>Score: {score}</p> : null}\n\t\t\t{loading? <p>Loading Questions...</p> : null}\n\t\t\t{!loading && !gameOver && (\n\t\t\t\t<QuestionCard \n\t\t\t\tquestionNum={number + 1}\n\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\tquestion={questions[number].question}\n\t\t\t\tanswers={questions[number].answers}\n\t\t\t\tuserAnswer={userAnswers? userAnswers[number] : undefined}\n\t\t\t\tcallback={checkAnswer}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{!gameOver && !loading &&  \n\t\t\t\tuserAnswers.length === number+1 &&\n\t\t\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t\t\t<button className='next' onClick={nextQuestion}>\n\t\t\t\t\t\t\tNext Question\n\t\t\t\t\t\t</button>\n\t\t\t\t\t) : null\n\t\t\t}\n\t\t</Wrapper>\n\t  </>\n  )\n}\nexport default App\n\n\n/*\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions } from './Api';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// types\nimport { QuestionsState, Difficulty } from './Api';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: any) => {\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save the answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className='start' onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n        {loading ? <p>Loading Questions...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n*/\n\n\n/*\nimport React, {useState} from 'react'\nimport QuestionCard from './components/QuestionCard'\nimport {fetchQuizQuestions} from './Api'\nimport {Difficulty, QuestionsState} from './Api'\n//import {GlobalStyle, Wrapper} from 'App.styles'\n\nexport type AnswerObject={\n\tquestion:string \n\tanswer:string \n\tcorrect:boolean\n\tcorrectAnswer:string\n}\n\nconst TOTAL_QUESTIONS=10\n\nconst App:React.FC=()=>{\n\tconst [loading, setLoading]=useState(false)\n\tconst [questions, setQuestions]=useState<QuestionsState[]>([])\n\tconst [number, setNumber]=useState(0)\n\tconst [userAnswers, setUserAnswers]=useState<AnswerObject[]>([])\n\tconst [score, setScore]=useState(0)\n\tconst [gameOver, setGameOver]=useState(true)\n\t\n\t//console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY))\n\tconsole.log(questions)\n\t\n\tconst startTrivia=async()=>{\n\t\tsetLoading(true)\n\t\tsetGameOver(false)\n\t\tconst newQuestions=await fetchQuizQuestions(\n\t\t\tTOTAL_QUESTIONS,\n\t\t\tDifficulty.EASY\n\t\t)\n\t\tsetQuestions(newQuestions)\n\t\tsetScore(0)\n\t\tsetUserAnswers([])\n\t\tsetNumber(0)\n\t\tsetLoading(false)\n\t}\n\tconst checkAnswer=(e:any)=>{\n\t\tif(!gameOver){\n\t\t\t//users answer\n\t\t\tconst answer=e.currentTarget.value\n\t\t\t//check answer against correct answer\n\t\t\tconst correct=questions[number].correct_answer === answer\n\t\t\t//add score if answer is correct\n\t\t\tif(correct) setScore(prev=>prev+1)\n\t\t\t//save answer in the array for user answers\n\t\t\tconst answerObject={\n\t\t\t\tquestion:questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer:questions[number].correct_answer\n\t\t\t}\n\t\t\tsetUserAnswers(prev=>[...prev, answerObject])\n\t\t}\n\t}\n\tconst nextQuestion=()=>{\n\t\t//move onto the next question if not the last question\n\t\tconst nextQ=number+1\n\t\tif(nextQ === TOTAL_QUESTIONS){\n\t\t\tsetGameOver(true)\n\t\t}else{\n\t\t\tsetNumber(nextQ)\n\t\t}\n\t}\n  \t\n  return (\n\t\t<>\n\t\t\t<h1>Reac Quiz</h1>\n\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t<button className='start' onClick={startTrivia}>\n\t\t\t\t\tStart\n\t\t\t\t</button>\t\t\t\n\t\t\t) : null}\n\t\t\t{!gameOver? <p className='score'>Score: {score} </p> : null}\n\t\t\t{loading && <p>Loading Questions...</p>}\n\t\t\t{!loading && !gameOver && (\n\t\t\t\t<QuestionCard \n\t\t\t\tquestionNum={number + 1}\n\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\tquestion={questions[number].question}\n\t\t\t\tanswers={questions[number].answers}\n\t\t\t\tuserAnswer={userAnswers? userAnswers[number] : undefined}\n\t\t\t\tcallback={checkAnswer}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{!loading && !gameOver && \n\t\t\t\tuserAnswers.length === number+1 &&\n\t\t\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t\t\t<button className='next' onClick={nextQuestion}>\n\t\t\t\t\t\t\tNext Question\n\t\t\t\t\t\t</button>\n\t\t\t\t\t) : null\n\t\t\t}\n\t  </>\n  )\n}\nexport default App\n*/","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}